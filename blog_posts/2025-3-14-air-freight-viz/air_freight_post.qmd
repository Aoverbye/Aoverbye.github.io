---
title: "The Freight That Flies"
author: "Amanda Overbye"
date: 03/15/2025
toc: true
editor_options: 
  chunk_output_type: console
editor: 
  markdown: 
    wrap: 72
execute: 
  eval: true
  warning: false
format:
  html:
    embed-resources: true
    toc: true
    code-fold: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, code_folding = FALSE)
```

```{r}
# Load packages
library(tidycensus)
library(tidyverse)
library(ggplot2)
library(tmap)
library(here)
library(janitor)
library(usdata)
library(tigris)
library(sf)
library(scales)
library(airportr)
library(ggmap)
library(maps)
library(patchwork) 
library(lubridate)
library(gridExtra)
library(ggalluvial)
library(geosphere)
library(waffle)
library(showtext)
library(ggbump)
```

# Creating an infographic using R data visualizations to answer questions about air freight shipping.

I have been watching airplanes fly by all of my life. I have always
found myself looking at the airplanes and wondering who or what is on
those airplanes. I have been ordering stuff online for all of my adult
life. I realize that the majority of items I order do not come from
nearby and probably have undergone their own journeys to arrive in
possession.

As a student in the Masters in Environmental Data Science program at the
University of California Santa Barbara, I was given the opportunity to
create some data visualizations on any topic of my choosing so I decided
I would answer my mostly life long question about airplanes and
shipping. I mainly wanted to know where are planes coming from and going
to? How much do we actually ship via freight? How has this changed over
time? This is a guide on how I created the visuals I used to answer
these questions.

# Definitions and Background

### Background on data

The data I am using comes from the department of transportation.
Specifically, I used the [Air Carriers : T-100 International Segment for
US carriers only
data](https://www.transtats.bts.gov/Fields.asp?gnoyr_VQ=GDK). This data
set contains information about all flights that are flying to and from
the United States from international areas. The main variable I was
interested in were those in regards to the amount of freight in pounds
transported, and the departure and destination information. While the
data included the International Air Transport Association, a 3 letter
code given to airports based on location, it lacked any coordinate
information. To gain the coordinate information, I used the airportr
package and then combined the datasets.

### Data loading

```{r}
# Function for reading in CSVs
read <- function(year) {
  file_name <- paste0("flights", year, ".csv") 
  file_path <- here("blog_posts", "2025-3-14-air-freight-viz", "data", file_name) 
  
  # Read and filter dataset
  df <- read.csv(file_path) %>%
    filter(FREIGHT != 0) %>% 
    clean_names()
  
  return(df)
}
```

### Reading in the data via the function

```{r}
# Read in data via function

freight2024 <- read(2024)
freight2023 <- read(2023)
freight2022 <- read(2022)
freight2021 <- read(2021)
freight2020 <- read(2020)
freight2019 <- read(2019)
freight2018 <- read(2018)
freight2017 <- read(2017)
freight2016 <- read(2016)
freight2015 <- read(2015)
freight2014 <- read(2014)
freight2013 <- read(2013)
freight2012 <- read(2012)
freight2011 <- read(2011)
freight2010 <- read(2010)
freight2009 <- read(2009)
freight2008 <- read(2008)
freight2007 <- read(2007)
freight2006 <- read(2006)
freight2005 <- read(2005)
freight2004 <- read(2004)
```

```{r}
# Create function to join datasets
join_freight_data <- function(...) {
  Reduce(full_join, list(...))
}
```

```{r}
# Use the function to join all datasets
freight_all <- join_freight_data(
  freight2004, freight2005, freight2006, freight2007, 
  freight2008, freight2009, freight2010, freight2011, 
  freight2012, freight2013, freight2014, freight2015, 
  freight2016, freight2017, freight2018, freight2019, 
  freight2020, freight2021, freight2022, freight2023, 
  freight2024
)
```

```{r}
air_coords <- airports %>% 
  clean_names()
```

# The Visualizations:

# The Map

The first visualization I wanted to create was a map showing which
airports had the largest amount of pounds traveling between them. While
the map adequately visualized the the connections between the airports,
it should be noted that it does not accurately show the route the planes
took. For example, a plane flying from Anchorage Alaska to South Korea
is most likely going to fly over the pacific ocean, not over the
Atlantic, Africa and the rest of Asia.

### Data cleaning and combining for the map

```{r}
# Rename origin and dest columns
freight_map_data <- freight_all %>% 
  rename(iata_origin = origin) %>% 
  rename(iata_dest = dest)
```

```{r}
# Duplicating iata coloumn
air_coords$iata_origin = air_coords$iata

# Renaming original iata column
air_coords_rn <- air_coords %>% 
  rename(iata_dest = iata)
```

```{r}
# Duplicate and rename lat longs
air_coords_rn$lat_dest = air_coords_rn$latitude
air_coords_rn$long_dest = air_coords_rn$longitude
```

```{r}
# Rename original lat longs
air_duocoords <- air_coords_rn %>% 
  rename(lat_origin = latitude) %>% 
  rename(long_origin = longitude)
```

### Joining the data

This is where I joined the edited freight data with the airport
coordinate data.

```{r}
# Join freight_all with air_duocoords to get destination coordinates
freight_coords <- freight_map_data %>%
  left_join(air_duocoords %>%
              select(iata_dest, lat_dest, long_dest), 
            by = "iata_dest") %>%
  # Join again to get origin coordinates
  left_join(air_duocoords %>%
              select(iata_origin, lat_origin, long_origin), 
            by = "iata_origin")
```

### Refining the data for the map

Before I could actually create the map, I had to get the data for the
for the locations that had the most amount of freight in pounds
traveling between them. I began by using the group_by dplyr function to
tell the program that I wanted all the rows where freight was shipped
between the same two airports to be treated as a single when I went to
count the pounds of freight and create a new column for it using the
mutate function. By using the distinct function, I was able to have only
one row for each origin and destination combination, therefore avoiding
having duplicates with the same amount of freight pounds at the end.

```{r}
airport_routes <- freight_coords %>%
  group_by(iata_origin, iata_dest) %>%
  mutate(freight_shipped = sum(freight, na.rm = TRUE)) %>%  # Sum freight shipped for each route
  ungroup() %>%  # Remove grouping after adding the freight count
  distinct(iata_origin, iata_dest, .keep_all = TRUE) %>%  # Keep only unique routes
  arrange(desc(freight_shipped)) 
```

```{r}
# Filtering for the top 20 routes
top_20_routes <- airport_routes %>%
  arrange(desc(freight_shipped)) %>%
  head(20)
```

### Plotting the map

To create the map, I used ggplot. I used geom_curve to ensure the lines
between the airports were curved and not just straight.

```{r}
# Define an aviation-themed color palette
aviation_pal <- c("#1E3A8A", "#3B82F6", "#60A5FA", "#93C5FD",  
                  "#6366F1", "#EAB308", "#FACC15", "#F97316",  
                  "#64748B", "#94A3B8", "#CBD5E1", "#E5E7EB")

# Get world map data
world_map <- map_data("world")

# Create ggplot 
map_pounds <- ggplot() +
  # Add world map background with aviation theme
  geom_polygon(data = world_map, aes(x = long, y = lat, group = group),
               fill = "#CBD5E1", color = "#CBD5E1") +  # Light gray-blue for land with slightly darker borders
  
  # Add curved lines for routes
  geom_curve(data = top_20_routes, 
             aes(x = long_origin, y = lat_origin, 
                 xend = long_dest, yend = lat_dest),
             color = "#3B82F6",  # Medium blue for flight paths
             curvature = 0.2, size = .5, alpha = 0.8) +
  
  # Add points for origin airports
  geom_point(data = top_20_routes, aes(x = long_origin, y = lat_origin, color = "Origin"), 
             size = 1) +
  
  # Add points for destination airports
  geom_point(data = top_20_routes, aes(x = long_dest, y = lat_dest, color = "Destination"), 
             size = 1) +
  
  # Theme settings matching the bump chart style
  theme_minimal() +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        panel.grid = element_blank(),

        legend.position = c(.48, .013),
        legend.justification = c("center"),
        legend.direction = "horizontal",
        legend.text = element_text(size = 10, face = "bold"),
        plot.title = element_text(size = 14, face = "bold"),
        plot.margin = margin(20, 50, 20, 50)
        ) +
  
  # Add the legend with colors from aviation palette
  scale_color_manual(values = c("Origin" = "#EAB308",  # Gold for origin points (resembles takeoff)
                                "Destination" = "#F97316"),  # Orange for destination points (resembles landing)
                     name = " ") +
  
  labs(title = "Top Air-Freight Connections", 
       x = "", y = "")

# Store the plot in a variable
route_map <- map_pounds
route_map

```

I enjoy looking at the map and imagining which planes might be coming
from different areas.

# The bump chart

The data I am using includes information from 2004 all the way to 2024.
For the basic map made above, I used information from all the years.
However, where things are coming from and going to has almost certainly
changed over the past 20 years. This is where I thought using a bump
chart could ergonicimally show how things have shifted over the past
several years.

### Refining the data for the bump chart

The main hurdle I faced when doing this chart was deciding how I was
going to tell the computer to separate the United States from other
countries. While the map highlights origin and destination differences,
I didn't want to do that here. The question I wanted this chart to
answer was purely about what other countries are on either end of the
arrival or depature with the most pounds of freight.

To do this, I simply told the computer to

I did this using the **ifelse** function. If the country name of the
origin was equal to the "United States," it tells the computer to use
the destination country name. If the origin country is not equal to the
United States, it tells the computer to use the origin name. This is how
I told the computer to make a new column with the non-united states
value. Once again, the summarize and sum functions were used to get the
total amount of freight pounds. Lastly, I used the **group_by** function
to tie tie the amount of freight to the year it was transported. For
example, every year would have a row with "china" (or any other
country), and the amount of freight transported there in the year.

```{r}
# Get the amount of freight based on the non us country 
other_countries_col <- freight_all %>% 
  mutate(other_country = ifelse(origin_country_name == "United States", dest_country_name, origin_country_name)) %>% 
  group_by(other_country, year) %>%
  summarize(total_freight = sum(freight, na.rm = TRUE))
```

```{r}
# Rank the number one countries by year
country_rank_by_year <- other_countries_col %>%
  filter(year >= 2019) %>% 
  select(year, other_country, total_freight) %>% 
  group_by(year) %>% 
  mutate(
    rank = row_number(desc(total_freight))
  ) %>% 
  ungroup() %>% 
  arrange(rank, year)
```

```{r}
# Filter for 2024
top_countries_2024 <- country_rank_by_year %>% 
  filter(year == 2024, rank <= 10) %>% 
  pull(other_country)
```

### Plotting the bump chart

The reasoning behind using a bump chart for this visualization is not
only because it can display the information accurately, but also because
it gives a sense of flow and travel. One of the key themes I want on my
visualization is a sense of movement and forward flow.

```{r}
ggplot(country_rank_by_year %>% filter(other_country %in% top_countries_2024), 
       aes(x = year, y = rank, color = other_country)) + 

  # Add smooth curved lines
  geom_bump(linewidth = 1.5) +

  # Add points for better visibility
  geom_point(size = 4) +

  # Left-side country labels (adjusted positioning)
  geom_text(
    data = country_rank_by_year %>% filter(year == 2019, other_country %in% top_countries_2024),
    aes(label = other_country), 
    hjust = 1, 
    nudge_x = -0.15, 
    size = 5, 
    fontface = "bold"
  ) +

  # Right-side rank labels (adjusted positioning)
  geom_text(
    data = country_rank_by_year %>% filter(year == 2024, other_country %in% top_countries_2024),
    aes(label = rank), 
    hjust = 0, 
    nudge_x = 0.15, 
    size = 5, 
    fontface = "bold"
  ) +

  # Reverse y-axis for ranking (1st place at the top)
  scale_y_reverse() +

  # Apply aviation color palette
  scale_color_manual(values = aviation_pal, guide = "none") +

  # Adjust boundaries to prevent cutoff
  coord_cartesian(xlim = c(2018.9, 2024.1), ylim = c(11, 0.5), clip = "off") +
  
  labs(title = "Top 10 Air-Freight Trade Partners of the U.S") +
  
  # Aesthetic improvements
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    axis.title = element_blank(),
    axis.text.y = element_blank(),
    axis.text.x = element_text(size = 14, face = "bold"),
    legend.position = "none",
    plot.margin = margin(20, 50, 20, 100) # Increased margins
  )

```

# Creating the timeline

After creating the bump chart, my next goal was to create a timeline
that showed how the amount of freight in pounds has changed over the
past 20 years. When I was thinking of how to put all of the elements
together, I originally wanted the bump chart and the timeline to focus
on the same amount of years. However, when I lengthened the time frame
of the bump chart, the information got harder to follow and it lost its
use in conveying information. When I tried to shorten the timeline,
certain events like the freight recession, became less noticeable.
Ultimately, I decided it was better and more interesting if the plots
focused on different years.

### Refining the data for the timeline

The data for the timeline was the easiest to handle because all I really
needed to do was ensure thaqt the date-time format was correct, then I
could group and plot with ease.

```{r}
# Convert year and month into a proper date format
freight_all <- freight_all %>%
  mutate(date = make_date(year, month, 1))
```

```{r}
# Aggregate freight by month
freight_month <- freight_all %>%
  group_by(year, month) %>%
  summarise(total_freight = sum(freight, na.rm = TRUE), .groups = "drop") %>%
  mutate(date = make_date(year, month, 1)) 
```

### Plotting the timeline

Plotting the timeline involved making some of the harder visual
decisions. I wanted to show the lines for each year, but I was afraid
that would take away from the general cohesiveness of all the elements
put together. Ultimately, I think it worked out but it was challenging
for me to figure out how I could make it cohesive.

```{r}
timeline <- 
  ggplot(freight_month, aes(x = date, y = total_freight)) +
  geom_smooth(color = "#1E3A8A", size = 1, span = 0.1, se = FALSE) +
  scale_x_date(date_labels = "%Y", date_breaks = "24 months") +  
  scale_y_continuous(
    labels = scales::label_number(scale = 1e-3, suffix = "K lb", big.mark = ",")  
  ) +
  labs(title = "Pounds of Air-Freight Moved To and From The USA",
       x = "",
       y = "") +  
  theme_minimal() +
  theme(
    plot.title = element_text(size = 12, face = "bold", hjust = 0.5),  # Match bump chart title
    axis.text.x = element_text(size = 10, face = "bold", angle = 45, hjust = 1),  
    axis.text.y = element_text(size = 10, face = "bold"),  
    panel.grid.major.y = element_blank(),  
    panel.grid.minor.y = element_blank(),  
    panel.grid.major.x = element_line(color = "lightgray", linewidth = 0.5),  
    plot.margin = margin(20, 50, 20, 50)  # Ensure proper spacing
  ) 

print(timeline)

```

# The final visuals

Once all those pieces were finished, I used google slides to put to
final pieces together.

![The final product:](final_infograph.png)

And that is how I made the pieces of this infographic
